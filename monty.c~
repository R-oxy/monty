#include "monty.h"

/**
 * main - main function of monty program
 * @argc: number of arguments
 * @argv: pointer to array of strings of arguments
 * Return: 0 on success, -1 on failure
 */
int main(int argc, char *argv[])
{
	FILE *fp;
	stack_t *stack = NULL;
	char *line = NULL;
	char *opcode;
	char *n;
	unsigned int line_number;
	size_t len = 0;
	ssize_t read;

	if (argc != 2)
	{
		printf("USAGE: monty file\n");
		exit(EXIT_FAILURE);
	}

	fp = fopen(argv[1], "r");
	if (fp == NULL)
	{
		printf("Error: Can't open file %s\n", argv[1]);
		exit(EXIT_FAILURE);
	}

	line_number = 0;
	while ((read = custom_getline(&line, &len, fp)) != -1)
	{
		line_number++;
		opcode = strtok(line, DELIMITERS);
		if (opcode == NULL || strncmp(opcode, "#", 1) == 0)
			continue;
		if (strcmp(opcode, "push") == 0)
		{
			n = strtok(NULL, DELIMITERS);
			push(&stack, line_number, n);
		}
		else
			opcode_struct(opcode, &stack, line_number);
	}

	free_all(stack, line, fp);
	return (EXIT_SUCCESS);
}

/**
 * frees - To free the stack
 * @head: pointer to the stack
 * Return: nothing
 */
void frees(stack_t *head)
{
	stack_t *tmp;

	if (head == NULL)
		return;
	while (head->prev)
	{
		head = head->prev;
	}

	while (head)
	{
		tmp = head;
		head = head->next;
		free(tmp);
	}
}

/**
 * custom_getline - Read a line from a file
 * @lineptr: Pointer to the buffer where the line will be stored
 * @n: Pointer to the variable that holds the size of the buffer
 * @stream: File stream to read from
 * Return: Number of characters read, or -1 on failure
 */
ssize_t custom_getline(char **lineptr, size_t *n, FILE *stream)
{
    ssize_t read;
    size_t buffer_size = 0;
    int c;

    if (*lineptr == NULL || *n == 0)
    {
        *n = 128;
        *lineptr = malloc(*n);
        if (*lineptr == NULL)
        {
            fprintf(stderr, "Error: Memory allocation failed\n");
            exit(EXIT_FAILURE);
        }
    }

    read = 0;
    while ((c = fgetc(stream)) != EOF)
    {
        if ((size_t)(read + 1) >= *n)
        {
            buffer_size = (*n) * 2;
            char *new_ptr = realloc(*lineptr, buffer_size);
            if (new_ptr == NULL)
            {
                fprintf(stderr, "Error: Memory allocation failed\n");
                free(*lineptr);
                exit(EXIT_FAILURE);
            }
            *lineptr = new_ptr;
            *n = buffer_size;
        }
        (*lineptr)[read++] = (char)c;
        if (c == '\n')
            break;
    }

    if (read == 0 && feof(stream))
        return -1;

    (*lineptr)[read] = '\0';
    return read;
}
